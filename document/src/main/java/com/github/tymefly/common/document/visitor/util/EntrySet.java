package com.github.tymefly.common.document.visitor.util;

import java.util.Collections;
import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.concurrent.Immutable;
import javax.annotation.concurrent.NotThreadSafe;

import com.github.tymefly.common.base.annotation.VisibleForTesting;
import com.github.tymefly.common.document.key.DocumentKey;
import com.github.tymefly.common.document.visitor.VisitorKey;

/**
 * A visitor that calculates the keys and the associated values that are stored in a Document.
 * @see KeySet
 * @see PathSet
 */
@NotThreadSafe
public non-sealed class EntrySet extends AbstractKeyVisitor<Set<EntrySet.Entry>> {
    /**
     * Immutable result object generated by this visitor
     */
    @Immutable
    public static class Entry {
        private final DocumentKey key;
        private final Object value;

        @VisibleForTesting
        Entry(@Nonnull DocumentKey key, @Nullable Object value) {
            this.key = key;
            this.value = value;
        }

        /**
         * Returns the Key corresponding to this entry.
         * @return the Key corresponding to this entry.
         */
        @Nonnull
        public DocumentKey getKey() {
            return key;
        }

        /**
         * Returns the value corresponding to this entry
         * @return the value corresponding to this entry
         */
        @Nullable
        public Object getValue() {
            return value;
        }

        @Override
        public boolean equals(Object other) {
            boolean equal;

            if (this == other) {
                equal = true;
            } else if (other instanceof Entry entry) {
                equal = Objects.equals(key.externalise(), entry.key.externalise()) &&
                        Objects.equals(value, entry.value);
            } else {
                equal = false;
            }

            return equal;
        }

        @Override
        public int hashCode() {
            return Objects.hash(key.externalise(), value);
        }

        @Override
        public String toString() {
            return "Entry{" + key.externalise() + " => " + value + '}';
        }
    }


    private static final EnumSet<VisitorOptions> INVALID_OPTIONS =
               EnumSet.of(VisitorOptions.INCLUDE_CHILD_NAMES, VisitorOptions.INCLUDE_SEQUENCE_NAMES);
    private final Set<Entry> results = new LinkedHashSet<>();



    /**
     * A constructor for an {@link EntrySet} visitor which will return all the entries in the Document.
     * This includes fields that map to {@literal null} and fields that are in child Documents.
     */
    public EntrySet() {
        this(VisitorOptions.RECURSIVE, VisitorOptions.INCLUDE_NULL);
    }

    /**
     * A customised version of the {@link EntrySet} Visitor.
     * @param option        One of the options that determine which keys to retrieve.
     * @throws IllegalArgumentException if {@link VisitorOptions#INCLUDE_CHILD_NAMES} and/or
     *                      {@link VisitorOptions#INCLUDE_SEQUENCE_NAMES} is requested
     */
    public EntrySet(@Nonnull VisitorOptions option) throws IllegalArgumentException {
        this(EnumSet.of(option));
    }

    /**
     * A customised version of the {@link EntrySet} Visitor
     * @param option        First option that determines which entries to retrieve
     * @param options       additional options
     * @throws IllegalArgumentException if {@link VisitorOptions#INCLUDE_CHILD_NAMES} and/or
     *                      {@link VisitorOptions#INCLUDE_SEQUENCE_NAMES} is requested
     */
    public EntrySet(@Nonnull VisitorOptions option, VisitorOptions... options) throws IllegalArgumentException {
        this(EnumSet.of(option, options));
    }

    /**
     * A customised version of the {@link EntrySet} Visitor
     * @param options       Options that determine which keys to retrieve
     * @throws IllegalArgumentException if {@link VisitorOptions#INCLUDE_CHILD_NAMES} and/or
     *                      {@link VisitorOptions#INCLUDE_SEQUENCE_NAMES} is requested
     */
    public EntrySet(@Nonnull EnumSet<VisitorOptions> options) throws IllegalArgumentException {
        super(options);

        if (EnumSet.copyOf(options).removeAll(INVALID_OPTIONS)) {
            throw new IllegalArgumentException("Invalid VisitorOptions: " + options);
        }
    }


    @Override
    void report(@Nonnull VisitorKey key, @Nullable Object value) {
        results.add(new Entry(key.documentKey(), value));
    }


    @Nonnull
    @Override
    public Set<Entry> process() {
        return Collections.unmodifiableSet(results);
    }
}
